#pragma checksum "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7980467d4447d82ffa571fecd32d0164035b8010"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ThirdRequirementBlazor.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\_Imports.razor"
using ThirdRequirementBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\_Imports.razor"
using ThirdRequirementBlazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\Pages\Index.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\Pages\Index.razor"
using System.Text.Json.Serialization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\Pages\Index.razor"
using ThirdRequirementBlazor.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 92 "C:\Users\Mihai\source\repos\ThirdRequirementBlazor\ThirdRequirementBlazor\Pages\Index.razor"
       
    private string NewGuid { get; set; }
    private Data.StatusObject statusObj;
    private int progressValue = 0;
    private string Result { get; set; }
    private Data.DataModel model = new Data.DataModel();
    private List<Data.ExtendedStatusObject> allProcs = new List<ExtendedStatusObject>();


    private async Task StartCalculation()
    {
        if (aTimer != null)
        {
            aTimer.Enabled = false;
            progressValue = 0;
            Result = "";
        }

        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44364/Process/StartCalculation/" + model.FirstName + "/" + model.LastName);
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            NewGuid = await JsonSerializer.DeserializeAsync
                <string>(responseStream);
        }
        else
        {
            NewGuid = "An error occured trying to reach the server.";
        }

    }

    private async Task GetStatus()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44364/Process/GetStatus/" + NewGuid);
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            statusObj = await JsonSerializer.DeserializeAsync<Data.StatusObject>(responseStream);
            progressValue = statusObj.Progress;
            Result = "Task running. Please wait... " + progressValue + "%";
        }
        else
        {
            Result = "An error occured trying to reach the server.";
        }
    }

    private async Task GetAll()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44364/Process/GetAll");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            allProcs = await JsonSerializer.DeserializeAsync<List<Data.ExtendedStatusObject>>(responseStream);
        }
        else
        {
            Result = "An error occured trying to reach the server.";
        }
    }

    #region Timer
    //timer
    private static System.Timers.Timer aTimer;
    public void StartTimer()
    {
        progressValue = 1;
        Result = "Task running. Please wait... 1%";
        aTimer = new System.Timers.Timer(500); // refresh progress bar at 0.5 sec
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }

    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (progressValue < 100)
        {
            GetStatus();
        }
        else
        {
            aTimer.Enabled = false;
            if (statusObj.Status == "failed")
                Result = "The task failed to finish the execution.";
            else
                Result = "The task finished succesfully. This is the result: " + statusObj.Result;

        }
        InvokeAsync(StateHasChanged);
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpClientFactory ClientFactory { get; set; }
    }
}
#pragma warning restore 1591
